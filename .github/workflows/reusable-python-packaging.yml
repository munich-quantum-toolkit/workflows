# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

name: 🐍 • Packaging

on:
  workflow_call:
    inputs:
      ###---- General inputs ----------------------------------------------------------------------------------------###
      pure-python:
        description: "Whether this is a pure Python package (or contains compiled extensions)"
        default: false
        type: boolean
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.13.4"
        type: string
      ###---- Ubuntu-specific inputs --------------------------------------------------------------------------------###
      ### Runs (ubuntu-24.04, ubuntu-22.04, ubuntu-24.04-arm, ubuntu-22.04-arm)
      ### Defaults are
      ### - ubuntu-24.04
      ### - ubuntu-24.04-arm
      ###------------------------------------------------------------------------------------------------------------###
      enable-ubuntu2404:
        description: "Whether to enable the Ubuntu 24.04 runner"
        default: true
        type: boolean
      enable-ubuntu2204:
        description: "Whether to enable the Ubuntu 22.04 runner"
        default: false
        type: boolean
      enable-ubuntu2404-arm:
        description: "Whether to enable the Ubuntu 24.04 ARM runner"
        default: true
        type: boolean
      enable-ubuntu2204-arm:
        description: "Whether to enable the Ubuntu 22.04 ARM runner"
        default: false
        type: boolean
      ###---- macOS-specific inputs ---------------------------------------------------------------------------------###
      ### Runs (macos-13, macos-14, macos-15)
      ### Defaults are
      ### - macos-13
      ### - macos-14
      ###------------------------------------------------------------------------------------------------------------###
      enable-macos13:
        description: "Whether to enable the macOS 13 runner"
        default: true
        type: boolean
      enable-macos14:
        description: "Whether to enable the macOS 14 runner"
        default: true
        type: boolean
      enable-macos15:
        description: "Whether to enable the macOS 15 runner"
        default: false
        type: boolean
      ###---- Windows-specific inputs -------------------------------------------------------------------------------###
      ### Runs (windows-2022, windows-2025, windows-11-arm)
      ### Defaults are
      ### - windows-2022
      ###------------------------------------------------------------------------------------------------------------###
      enable-windows2022:
        description: "Whether to enable the Windows 2022 runner"
        default: true
        type: boolean
      enable-windows2025:
        description: "Whether to enable the Windows 2025 runner"
        default: false
        type: boolean
      enable-windows11-arm:
        description: "Whether to enable the Windows 11 ARM runner"
        default: false
        type: boolean

jobs:
  build-sdist:
    name: 📦 SDist
    runs-on: ubuntu-latest
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: recursive
          fetch-depth: 0
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6
      # build the source distribution
      - name: Build SDist
        run: uv build --sdist
      # check the metadata of the source distribution
      - name: Check metadata
        run: uvx twine check dist/*
      # upload the source distribution as an artifact (adds a `dev-` prefix for PRs)
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'dev-' || '' }}cibw-sdist
          path: dist/*.tar.gz

  build-wheel:
    if: ${{ inputs.pure-python }}
    name: 🛞 Wheel
    runs-on: ubuntu-latest
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: recursive
          fetch-depth: 0
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6
      # build the wheel
      - name: Build Wheel
        run: uv build --wheel
      # check the metadata of the wheel
      - name: Check metadata
        run: uvx twine check dist/*
      # upload the wheel as an artifact (adds a `dev-` prefix for PRs)
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'dev-' || '' }}cibw-wheel
          path: dist/*.whl

  build-matrix:
    if: ${{ !inputs.pure-python }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - id: build-matrix
        name: Build runner matrix
        run: |
          matrix='[]'
          if [ "${{ inputs.enable-ubuntu2404 }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "ubuntu-24.04"}]')
          fi
          if [ "${{ inputs.enable-ubuntu2204 }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "ubuntu-22.04"}]')
          fi
          if [ "${{ inputs.enable-ubuntu2404-arm }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "ubuntu-24.04-arm"}]')
          fi
          if [ "${{ inputs.enable-ubuntu2204-arm }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "ubuntu-22.04-arm"}]')
          fi
          if [ "${{ inputs.enable-macos13 }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "macos-13"}]')
          fi
          if [ "${{ inputs.enable-macos14 }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "macos-14"}]')
          fi
          if [ "${{ inputs.enable-macos15 }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "macos-15"}]')
          fi
          if [ "${{ inputs.enable-windows2022 }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "windows-2022"}]')
          fi
          if [ "${{ inputs.enable-windows2025 }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "windows-2025"}]')
          fi
          if [ "${{ inputs.enable-windows11-arm }}" = "true" ]; then
            matrix=$(echo $matrix | jq '. + [{"runs-on": "windows-11-arm"}]')
          fi
          echo "matrix=$(echo $matrix | jq -rc .)" >> $GITHUB_OUTPUT
          echo $(echo $matrix | jq -rc .)

  build-wheels:
    if: ${{ !inputs.pure-python }}
    needs: [build-matrix]
    name: 🎡 ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: recursive
          fetch-depth: 0
      # optionally set up Z3 (non-Ubuntu only)
      - if: ${{ inputs.setup-z3 && matrix.runs-on != 'ubuntu-24.04' && matrix.runs-on != 'ubuntu-24.04-arm' && matrix.runs-on != 'ubuntu-22.04' && matrix.runs-on != 'ubuntu-22.04-arm' }}
        name: Setup Z3
        uses: cda-tum/setup-z3@34d1e04d31a168fa330626fad1275cf23de02591 # v1
        with:
          version: ${{ inputs.z3-version }}
      # set up ccache for faster C++ builds
      - if: ${{ matrix.runs-on != 'ubuntu-24.04' && matrix.runs-on != 'ubuntu-24.04-arm' && matrix.runs-on != 'ubuntu-22.04' && matrix.runs-on != 'ubuntu-22.04-arm' }}
        name: Setup ccache
        uses: Chocobo1/setup-ccache-action@f84f86840109403e0fe0ded8b0766c9633affa16 # v1
        with:
          prepend_symlinks_to_path: false
          windows_compile_environment: msvc
          override_cache_key: wheels-${{ matrix.runs-on }}
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6
        with:
          enable-cache: ${{ matrix.runs-on != 'ubuntu-24.04' && matrix.runs-on != 'ubuntu-24.04-arm' && matrix.runs-on != 'ubuntu-22.04' && matrix.runs-on != 'ubuntu-22.04-arm' }}
      # run cibuildwheel to build wheels for the specified Python version
      - uses: pypa/cibuildwheel@faf86a6ed7efa889faf6996aa23820831055001a # v2.23
      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash
      # upload the wheels as an artifact (adds a `dev-` prefix for PRs)
      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'dev-' || '' }}cibw-wheels-${{ matrix.runs-on }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl
