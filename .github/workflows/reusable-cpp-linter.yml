# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

name: ðŸ‡¨ â€¢ Lint
on:
  workflow_call:
    inputs:
      clang-version:
        description: "Clang version to use"
        default: 18
        type: number
      files-changed-only:
        description: "Whether to only lint files that have changed"
        default: true
        type: boolean
      cmake-args:
        description: "Additional arguments to pass to CMake"
        default: ""
        type: string
      cpp-linter-extra-args:
        description: "Extra arguments to pass to the cpp-linter"
        default: "-std=c++17"
        type: string
      build-project:
        description: "Whether to build the project"
        default: false
        type: boolean
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.13.4"
        type: string
      setup-pybind11:
        description: "Whether to setup and activate a Python virtual environment with pybind11 installed"
        default: false
        type: boolean

jobs:
  lint:
    name: ðŸš¨ Lint
    runs-on: ubuntu-latest
    env:
      clang-version: ${{ inputs.clang-version }}
    steps:
      # check out the repository (including submodules)
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: recursive
      # optionally set up Z3
      - if: ${{ inputs.setup-z3 }}
        name: Setup Z3
        uses: cda-tum/setup-z3@34d1e04d31a168fa330626fad1275cf23de02591 # v1
        with:
          version: ${{ inputs.z3-version }}
      # install a specific version of the LLVM toolchain
      - name: Install llvm@${{ env.clang-version }}
        run: |
          sudo apt-get update
          wget https://apt.llvm.org/llvm.sh -O ${{ runner.temp }}/llvm_install.sh
          chmod +x ${{ runner.temp }}/llvm_install.sh
          if sudo ${{ runner.temp }}/llvm_install.sh ${{ env.clang-version }}; then
            sudo apt-get install -y clang-format-${{ env.clang-version }} \
                                    clang-tidy-${{ env.clang-version }} \
                                    libmlir-${{ env.clang-version }}-dev \
                                    mlir-${{ env.clang-version }}-tools \
                                    clang-${{ env.clang-version}} \
                || exit 1
          else
            echo "Installation from script failed."
            exit 1
          fi
          echo "CC=clang-${{ env.clang-version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ env.clang-version }}" >> $GITHUB_ENV
          echo "MLIR_DIR=/usr/lib/llvm-${{ env.clang-version }}/lib/cmake/mlir" >> $GITHUB_ENV
          echo "LLVM_DIR=/usr/lib/llvm-${{ env.clang-version }}/lib/cmake/llvm" >> $GITHUB_ENV
      # set up ccache for faster C++ builds if building the project
      - if: ${{ inputs.build-project }}
        name: Setup ccache
        uses: Chocobo1/setup-ccache-action@f84f86840109403e0fe0ded8b0766c9633affa16 # v1
        with:
          prepend_symlinks_to_path: false
          override_cache_key: c++-lint
      # set up mold as linker for faster C++ builds
      - if: ${{ inputs.build-project }}
        name: Set up mold as linker
        uses: rui314/setup-mold@e16410e7f8d9e167b74ad5697a9089a35126eb50 # v1
      # set up uv for faster Python package management
      - if: ${{ inputs.setup-pybind11 }}
        name: Install the latest version of uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
        with:
          python-version: 3.13
          activate-environment: true
      # install pybind11 for the cmake build to find its headers
      - if: ${{ inputs.setup-pybind11 }}
        name: Install pybind11
        run: uv pip install pybind11
      # generate a compilation database (assumes that the CMake project has `CMAKE_EXPORT_COMPILE_COMMANDS` set)
      - name: Generate compilation database
        run: |
          echo $CC
          echo $CXX
          $CC --version
          $CXX --version
          echo $MLIR_DIR
          echo $LLVM_DIR
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug ${{ inputs.cmake-args }}
      # build the project, if configured to do so
      - if: ${{ inputs.build-project }}
        name: Build
        run: cmake --build build --config Debug
      # runs the cpp-linter action using the generated compilation database and the specified clang version
      - name: Run cpp-linter
        uses: cpp-linter/cpp-linter-action@8ae6cfaea8cc035c6155b5fe79d7991a9bf638af # v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          style: ""
          tidy-checks: ""
          version: ${{ env.clang-version }}
          ignore: "build|!build/mlir/**|**/include|include"
          thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
          step-summary: true
          database: "build"
          extra-args: ${{ inputs.cpp-linter-extra-args }}
          files-changed-only: ${{ inputs.files-changed-only }}
      - name: Fail if linter found errors
        if: steps.linter.outputs.checks-failed > 0
        run: echo "Linter found errors" && exit 1
