# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

name: 🐍 • Tests
on:
  workflow_call:
    inputs:
      runs-on:
        description: "The platform to run the tests on"
        required: true
        type: string
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.13.4"
        type: string

jobs:
  python-tests:
    name: 🐍 ${{ inputs.runs-on }}
    runs-on: ${{ inputs.runs-on }}
    env:
      FORCE_COLOR: 3
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      # check out the repository (including submodules and all history)
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: recursive
          fetch-depth: 0
      # optionally set up Z3
      - if: ${{ inputs.setup-z3 }}
        name: Setup Z3
        uses: cda-tum/setup-z3@34d1e04d31a168fa330626fad1275cf23de02591 # v1
        with:
          version: ${{ inputs.z3-version }}
      # set up ccache for faster C++ builds
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@f84f86840109403e0fe0ded8b0766c9633affa16 # v1
        with:
          prepend_symlinks_to_path: false
          windows_compile_environment: msvc
          override_cache_key: python-tests-${{ inputs.runs-on }}
      # set up mold as linker for faster C++ builds (Linux only)
      - name: Set up mold as linker (Linux only)
        uses: rui314/setup-mold@67424c1b3680e35255d95971cbd5de0047bf31c3 # v1
      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6
      # explicitly set CC and CXX for Ubuntu ARM runners to work around an issue
      # where CXX would wrongfully be set to an x86_64 compiler.
      - name: Set CC and CXX for ARM
        if: ${{ runner.os }} == 'Linux' && ${{ runner.arch }} == 'ARM64'
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
      # run the nox minimums session (assumes a nox session named "minimums" exists) with coverage
      - name: 🐍 Test with minimal versions
        run: uvx nox -s minimums --verbose -- --cov --cov-report=xml:coverage-${{ inputs.runs-on }}.xml --cov-append
      # run the nox tests session (assumes a nox session named "tests" exists) with coverage
      - name: 🐍 Test
        run: uvx nox -s tests --verbose -- --cov --cov-report=xml:coverage-${{ inputs.runs-on }}.xml --cov-append
      # upload the report as an artifact to GitHub so that it can later be uploaded to Codecov
      - name: Upload 🐍 coverage report for ${{ inputs.runs-on }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: coverage-${{ inputs.runs-on }}
          path: coverage-*
